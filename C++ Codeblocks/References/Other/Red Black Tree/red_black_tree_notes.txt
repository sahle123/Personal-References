Lecture notes from MIT open courses on Red-Black Trees
	
	LU: 03/06/16

To continue->https://youtu.be/iumaOUqoSCk?t=58m17s
other: https://www.cs.auckland.ac.nz/software/AlgAnim/red_black.html
other: http://staff.ustc.edu.cn/~csli/graduate/algorithms/book6/chap14.htm
other: https://www.youtube.com/watch?v=CTvfzU_uNKE
//----------------------------------------------------------------------------
Properties of RB Trees:

	* They are binary search trees (BST) with an extra field called the 'color field.'

	* They satisfy the "red-black property"

	* The Red-black property ensures that a RB Tree will always have logorithmic height. i.e. (log n) depth.

	* A RB Tree with n keys has height H <= 2log(n+1)

//----------------------------------------------------------------------------
The Red-Black Property:

	1.) Every node is either red or black colored.

	2.) The root and the leaves are all black colored.

	3.) Every red node has a black parent.

	4.) A simple path from node X to a descendent leaf, all such nodes have the same number of black nodes (excluding X's node). This is known as the 'black-height'

//----------------------------------------------------------------------------
# Assume x.right != NIL
Left-Rotate(T, x) pseudocode:
	y = x.right 			// Assign new temporary variable y to x rightchild
	x.right = y.left 		// x's right child becomes y's left child

	if (y.left != NIL)		// Makes sure y's old left child points back to x.
		y.left.parent = x

	y.parent = x.parent

	// 3 cases to check for about x's old parent
	// Case 1: x was root
	if(x.parent == NIL)
		// Then y is simply the new root

	// Case 2: if x was the left child of its parent, have it point to y
	else if (x == x.parent.left)
		x.parent.left = y

	// Case 3: if x was the right child of its parent, have it point to y
	else
		x.parent.right = y

	// Final step is to link x node and y node with each other
	y.left = x
	x.parent = y

	return

//----------------------------------------------------------------------------
# Assume x.left != NIL
Right-Rotate(T, x) pseudocode:
	y = x.left 			// Assign x's left child to new temporary var
	x.left = y.right 	// y's left child becomes x's left child

	if(y.right != NIL) 	// Makes sure y's old right child points back to x
		y.right.parent = x

	y.parent = x.parent

	// 3 cases to check for about x's old parent

	// Case 1: x was root
	if (x.parent == NIL)
		// Then y is simply the new root

	// Case 2: if x was the left child of it's parent, have it point to y
	else if (x == x.parent.left)
		x.parent.left = y

	// Case 3: if x was the right child of it's parent, have it point to y
	else
		x.parent.right = y

	// Final step is to link x node and y node with each other
	y.right = x
	x.parent = y


	return
//----------------------------------------------------------------------------
RB-Insert(T, x) pseudocode:
	Tree-Insert(T, x)	// Standard tree-insert
	x.color = RED
	while (x.parent != NIL) AND (x.parent.color == RED) 
		if x.parent == x.parent.parent.left 	// If x's parent is the left
												// child of parent's parent.
			y = x.parent.parent.right

			// Case 1
			if y .color == RED
				x.parent.color = BLACK
				y.color = BLACK
				x.parent.parent.color = RED
				x = x.parent.parent

			// Case 2
			elif x == x.parent.right
				x = x.parent
				Left-Rotate(T, x)

			// Case 3
			else
				x.parent.color = BLACK
				x.parent.parent.color = RED
				Right-Rotate(T, x.parent.parent)

		else // x.parent == x.parent.parent.right

			y = x.parent.parent.left

			// Case 1
			if y.color == RED
				x.parent.color = BLACK
				x.parent.parent.color = RED
				x = x.parent.parent

			// Case 2
			elif x == x.parent.left
				x = x.parent
				Right-Rotate(T, x)

			// Case 3
			else
				x.parent.color = BLACK
				x.parent.parent.color = RED
				Left-Rotate(T, x.parent.parent)

	T.root.color = BLACK

//----------------------------------------------------------------------------
# Note that nil[T] is a sentinel node. This is a node that points to nothing
# and is meant to represent a leaf.
BST-Delete(T, x) pseudocode:

	if ((x.left == nil[T]) || (x.right == nil[T]))
		y = x

	else
		y = Tree-Successor(T, x) //Find the inorder successor of x

	if y.left != nil[T]
		z = y.left
	else
		z = y.right

	z.parent = y.parent

	if y.parent == nil[T]
		T.root = z
	else if y == y.parent.left
		y.parent.left = z
	else
		y.parent.right = z

	if y != x
		x.key = y.key
	if y.color == BLACK
		RB-Delete-Fixup(T, z)

	return y


//----------------------------------------------------------------------------
RB-Delete-fixup(T, x) pseudocode:

//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------